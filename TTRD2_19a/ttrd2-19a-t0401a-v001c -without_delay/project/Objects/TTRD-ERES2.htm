<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TTRD-ERES2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TTRD-ERES2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed May 11 12:03:42 2022
<BR><P>
<H3>Maximum Stack Usage =       1056 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART_Update &rArr; import_pkt &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[aa]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SVC_Handler</a><BR>
 <LI><a href="#[f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">DebugMon_Handler</a><BR>
 <LI><a href="#[10]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">PendSV_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[c2]">assert_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[132]">UART2_BUF_O_Send_Char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">TIMEOUT_T3_USEC_Start</a><BR>
 <LI><a href="#[12e]">TIM_GetCounter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2]">assert_failed</a><BR>
 <LI><a href="#[11a]">REG_CONFIG_TIMER_Check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[134]">USART_SendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2]">assert_failed</a><BR>
 <LI><a href="#[133]">USART_GetFlagStatus</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2]">assert_failed</a><BR>
 <LI><a href="#[131]">UART2_BUF_O_Check_Data_Integrity</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[118]">REG_CONFIG_CHECKS_UART_Check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[119]">REG_CONFIG_CHECKS_UART_Store</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">PROCESSOR_Perform_Safe_Shutdown</a><BR>
 <LI><a href="#[19b]">mass_storage_report_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
 <LI><a href="#[19c]">mass_storage_list_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
 <LI><a href="#[19d]">mass_storage_downlink_api</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
 <LI><a href="#[185]">hk_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
 <LI><a href="#[195]">verification_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
 <LI><a href="#[1aa]">time_management_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
 <LI><a href="#[1ac]">test_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
 <LI><a href="#[1ab]">scheduling_app</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">route_pkt</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[70]">ADC1_Update</a> from ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[7b]">ADC1_vbat_Update</a> from adc1_task.o(i.ADC1_vbat_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[76]">ADCS_exHealth_Rep_task_Update</a> from adcs_exhealth_rep_task.o(i.ADCS_exHealth_Rep_task_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">COMMS_EXT_WOD_Rep_task_Update</a> from comms_ext_wod_rep_task.o(i.COMMS_EXT_WOD_Rep_task_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[73]">COMMS_Health_Rep_task_Update</a> from comms_health_rep_task.o(i.COMMS_Health_Rep_task_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[74]">COMMS_WOD_Rep_task_Update</a> from comms_wod_rep_task.o(i.COMMS_WOD_Rep_task_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[77]">COMMS_exHealth_Rep_task_Update</a> from comms_exhealth_rep_task.o(i.COMMS_exHealth_Rep_task_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[60]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from fatfs_sd_sdio.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">EPS_Health_Rep_task_Update</a> from eps_health_rep_task.o(i.EPS_Health_Rep_task_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[75]">EPS_exHealth_Rep_task_Update</a> from eps_exhealth_rep_task.o(i.EPS_exHealth_Rep_task_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">HEARTBEAT_SW_Update</a> from ttrd2-05a-t0401a-v001a_heartbeat_sw_task.o(i.HEARTBEAT_SW_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[a]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">IDLE_Update</a> from idle_task.o(i.IDLE_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[b]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">PROCESSOR_TASK_Update</a> from ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">RTT_05a_Scheduler_Osc_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05a_Scheduler_Osc_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[6a]">RTT_05b_Scheduler_Osc_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05b_Scheduler_Osc_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[6b]">RTT_06a_MoniTTor_Overrun_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06a_MoniTTor_Overrun_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[6c]">RTT_06b_MoniTTor_Underrun_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06b_MoniTTor_Underrun_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[6d]">RTT_07_PredicTTor_Test_Update</a> from ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_07_PredicTTor_Test_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">SCHEDULE_SERVICES_Update</a> from schedule_services_task.o(i.SCHEDULE_SERVICES_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from fatfs_sd_sdio.o(i.SDIO_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from ttrd2-18a-t0401a-v001a_monittor_i.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[14]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from ttrd2-19a-t0401a-v001c_scheduler.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7c]">UART_Update</a> from uart_task.o(i.UART_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[37]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">WATCHDOG_Update</a> from ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Update) referenced from ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[67]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[68]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[66]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[65]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[81]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[99]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[83]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[8d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[85]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[87]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[89]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1dd]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1de]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1df]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1e0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1e1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1e2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1e3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[7f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1e4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1e5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; PROCESSOR_Init &rArr; PROCESSOR_Configure_Reqd_MoSt &rArr; ADC1_Init &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1e6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ab]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[91]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[93]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[95]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
</UL>

<P><STRONG><a name="[97]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_schedule_load_api
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fs_stat
</UL>

<P><STRONG><a name="[98]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[a4]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[82]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9b]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
</UL>

<P><STRONG><a name="[9f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_save_schedules
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_load_schedules
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[a1]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
</UL>

<P><STRONG><a name="[1eb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1ec]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[65]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a5]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[84]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[9d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[a7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1f1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[a6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1f4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[90]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c1]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[94]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ac]"></a>ADC1_Get_Temperature_Celsius</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Get_Temperature_Celsius))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ADC1_Get_Temperature_Celsius &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[ae]"></a>ADC1_Init</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ADC1_Init &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_ADC1_Store
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonStructInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[b8]"></a>ADC1_Read_Channel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Read_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Update
</UL>

<P><STRONG><a name="[70]"></a>ADC1_Update</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ttrd2-05a-t0401a-v001a_adc_task.o(i.ADC1_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ADC1_Update &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_ADC1_Check
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonStructInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[c0]"></a>ADC1_vbat_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, adc1_task.o(i.ADC1_vbat_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADC1_vbat_Init &rArr; TIMEOUT_T3_USEC_Init &rArr; TIM_TimeBaseInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonStructInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Update
</UL>

<P><STRONG><a name="[7b]"></a>ADC1_vbat_Update</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc1_task.o(i.ADC1_vbat_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ADC1_vbat_Update &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[76]"></a>ADCS_exHealth_Rep_task_Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adcs_exhealth_rep_task.o(i.ADCS_exHealth_Rep_task_Update))
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[b5]"></a>ADC_Cmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Init
</UL>

<P><STRONG><a name="[b2]"></a>ADC_CommonInit</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_CommonInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Init
</UL>

<P><STRONG><a name="[b0]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Init
</UL>

<P><STRONG><a name="[be]"></a>ADC_GetConversionValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_GetConversionValue &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[bc]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[b3]"></a>ADC_Init</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[b9]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADC_RegularChannelConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[ba]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_SoftwareStartConv &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
</UL>

<P><STRONG><a name="[af]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[b4]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_TempSensorVrefintCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[c1]"></a>ADC_VBATCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_VBATCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_VBATCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Update
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Init
</UL>

<P><STRONG><a name="[78]"></a>COMMS_EXT_WOD_Rep_task_Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comms_ext_wod_rep_task.o(i.COMMS_EXT_WOD_Rep_task_Update))
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[73]"></a>COMMS_Health_Rep_task_Update</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, comms_health_rep_task.o(i.COMMS_Health_Rep_task_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = COMMS_Health_Rep_task_Update &rArr; COMMS_Health_Req_SCH &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_Health_Req_SCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[c3]"></a>COMMS_Health_Req_SCH</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, housekeeping.o(i.COMMS_Health_Req_SCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = COMMS_Health_Req_SCH &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_Health_Rep_task_Update
</UL>

<P><STRONG><a name="[c6]"></a>COMMS_WOD_Rep_SCH</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, housekeeping.o(i.COMMS_WOD_Rep_SCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = COMMS_WOD_Rep_SCH &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wod_log
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_WOD_Rep_task_Update
</UL>

<P><STRONG><a name="[74]"></a>COMMS_WOD_Rep_task_Update</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, comms_wod_rep_task.o(i.COMMS_WOD_Rep_task_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = COMMS_WOD_Rep_task_Update &rArr; COMMS_WOD_Rep_SCH &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_WOD_Rep_SCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[77]"></a>COMMS_exHealth_Rep_task_Update</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, comms_exhealth_rep_task.o(i.COMMS_exHealth_Rep_task_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = COMMS_exHealth_Rep_task_Update &rArr; COMMS_exHealth_Req_SCH &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_exHealth_Req_SCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[ca]"></a>COMMS_exHealth_Req_SCH</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, housekeeping.o(i.COMMS_exHealth_Req_SCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = COMMS_exHealth_Req_SCH &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_exHealth_Rep_task_Update
</UL>

<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fatfs_sd_sdio.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; SD_ProcessDMAIRQ &rArr; DMA_ClearFlag &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>DMA_ClearFlag</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_ClearFlag &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_uart_tx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[cd]"></a>DMA_Cmd</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[ce]"></a>DMA_DeInit</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA_DeInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Init
</UL>

<P><STRONG><a name="[cf]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_GetCmdStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[d0]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_rx_check
</UL>

<P><STRONG><a name="[d1]"></a>DMA_Init</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Init
</UL>

<P><STRONG><a name="[d2]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_SetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[d3]"></a>EPS_Health_Rep_task_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eps_health_rep_task.o(i.EPS_Health_Rep_task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPS_Health_Rep_task_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[72]"></a>EPS_Health_Rep_task_Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eps_health_rep_task.o(i.EPS_Health_Rep_task_Update))
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[75]"></a>EPS_exHealth_Rep_task_Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eps_exhealth_rep_task.o(i.EPS_exHealth_Rep_task_Update))
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[d5]"></a>GPIO_Init</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_USART_Tx_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_PinAFConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_USART_Tx_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
</UL>

<P><STRONG><a name="[d7]"></a>GPIO_ResetBits</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
</UL>

<P><STRONG><a name="[d8]"></a>GPIO_SetBits</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
</UL>

<P><STRONG><a name="[141]"></a>HAL_obc_BKPSRAM_BASE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc_hsi.o(i.HAL_obc_BKPSRAM_BASE))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkup_sram_INIT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sram_hard_delete
</UL>

<P><STRONG><a name="[de]"></a>HAL_obc_enableBkUpAccess</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, obc_hsi.o(i.HAL_obc_enableBkUpAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_obc_enableBkUpAccess &rArr; RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupRegulatorCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_reset_source</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, obc_hsi.o(i.HAL_reset_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_reset_source &rArr; RCC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_sys_getDate</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, obc_hsi.o(i.HAL_sys_getDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_sys_getDate &rArr; RTC_GetDate &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_QB50
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_UTC
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_time_QB50
</UL>

<P><STRONG><a name="[e6]"></a>HAL_sys_getTime</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, obc_hsi.o(i.HAL_sys_getTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_QB50
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_UTC
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_time_QB50
</UL>

<P><STRONG><a name="[e8]"></a>HAL_sys_setDate</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, obc_hsi.o(i.HAL_sys_setDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_sys_setDate &rArr; RTC_SetDate &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_UTC
</UL>

<P><STRONG><a name="[ea]"></a>HAL_sys_setTime</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, obc_hsi.o(i.HAL_sys_setTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_sys_setTime &rArr; RTC_SetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_UTC
</UL>

<P><STRONG><a name="[191]"></a>HAL_uart_rx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_hal.o(i.HAL_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[ec]"></a>HAL_uart_tx</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, uart_hal.o(i.HAL_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_uart_tx &rArr; MYDMA_Init &rArr; RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[ef]"></a>HEARTBEAT_SW_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_heartbeat_sw_task.o(i.HEARTBEAT_SW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HEARTBEAT_SW_Init &rArr; GPIO_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[6f]"></a>HEARTBEAT_SW_Update</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_heartbeat_sw_task.o(i.HEARTBEAT_SW_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HEARTBEAT_SW_Update &rArr; SWITCH_BUTTON1_Get_State &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Get_State
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_GPIO_Check
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[f2]"></a>HLDLC_deframe</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, hldlc.o(i.HLDLC_deframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HLDLC_deframe &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[f4]"></a>HLDLC_frame</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, hldlc.o(i.HLDLC_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HLDLC_frame &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[79]"></a>IDLE_Update</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, idle_task.o(i.IDLE_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IDLE_Update &rArr; queue_IDLE &rArr; queuePop
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_IDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[114]"></a>MONITTORi_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
</UL>

<P><STRONG><a name="[122]"></a>MONITTORi_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[f6]"></a>MONITTORi_Start</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MONITTORi_Start &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[f7]"></a>MONITTORi_Stop</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.MONITTORi_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MONITTORi_Stop &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[ee]"></a>MYDMA_Enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_hal.o(i.MYDMA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MYDMA_Enable &rArr; USART_DMACmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_uart_tx
</UL>

<P><STRONG><a name="[ed]"></a>MYDMA_Init</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, uart_hal.o(i.MYDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MYDMA_Init &rArr; RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_uart_tx
</UL>

<P><STRONG><a name="[fd]"></a>NVIC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Set_Interrupt_Priority_Levels
</UL>

<P><STRONG><a name="[fe]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NVIC_PriorityGroupConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Set_Interrupt_Priority_Levels
</UL>

<P><STRONG><a name="[ff]"></a>PREDICTTORi_Check_Task_Sequence</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_predicttor_i.o(i.PREDICTTORi_Check_Task_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PREDICTTORi_Check_Task_Sequence &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[123]"></a>PREDICTTORi_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_predicttor_i.o(i.PREDICTTORi_Init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[fb]"></a>PROCESSOR_Change_MoSt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Change_MoSt))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
</UL>

<P><STRONG><a name="[f8]"></a>PROCESSOR_Get_MoSt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Get_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
</UL>

<P><STRONG><a name="[110]"></a>PROCESSOR_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PROCESSOR_Init &rArr; PROCESSOR_Configure_Reqd_MoSt &rArr; ADC1_Init &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>PROCESSOR_Perform_Safe_Shutdown</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Perform_Safe_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Get_State
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Get_State
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_GPIO_Check
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_ADC1_Check
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_Celsius
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Check
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Check
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Add_Task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_07_PredicTTor_Test_Update
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_06b_MoniTTor_Underrun_Test_Update
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_06a_MoniTTor_Overrun_Test_Update
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05b_Scheduler_Osc_Test_Update
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
</UL>

<P><STRONG><a name="[fa]"></a>PROCESSOR_Store_PFC</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Store_PFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PROCESSOR_Store_PFC &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
</UL>

<P><STRONG><a name="[f9]"></a>PROCESSOR_Store_Reqd_MoSt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Store_Reqd_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PROCESSOR_Store_Reqd_MoSt &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
</UL>

<P><STRONG><a name="[10a]"></a>PROCESSOR_TASK_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PROCESSOR_TASK_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Retrieve_State
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[71]"></a>PROCESSOR_TASK_Update</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PROCESSOR_TASK_Update &rArr; ADC1_Get_Temperature_Celsius &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_Celsius
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Store_State
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[df]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PWR_BackupAccessCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_obc_enableBkUpAccess
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Store_State
</UL>

<P><STRONG><a name="[e0]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(i.PWR_BackupRegulatorCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PWR_BackupRegulatorCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_obc_enableBkUpAccess
</UL>

<P><STRONG><a name="[da]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_obc_enableBkUpAccess
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_USART_Tx_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Init
</UL>

<P><STRONG><a name="[db]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_USART_Tx_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Store_State
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[b1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Init
</UL>

<P><STRONG><a name="[e3]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_reset_source
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[140]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[e2]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RCC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_reset_source
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[bf]"></a>REG_CONFIG_CHECKS_ADC1_Check</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_adc1.o(i.REG_CONFIG_CHECKS_ADC1_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = REG_CONFIG_CHECKS_ADC1_Check &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
</UL>

<P><STRONG><a name="[b6]"></a>REG_CONFIG_CHECKS_ADC1_Store</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_adc1.o(i.REG_CONFIG_CHECKS_ADC1_Store))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[f0]"></a>REG_CONFIG_CHECKS_GPIO_Check</STRONG> (Thumb, 542 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_gpio.o(i.REG_CONFIG_CHECKS_GPIO_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = REG_CONFIG_CHECKS_GPIO_Check &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
</UL>

<P><STRONG><a name="[10c]"></a>REG_CONFIG_CHECKS_GPIO_Store</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_gpio.o(i.REG_CONFIG_CHECKS_GPIO_Store))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[118]"></a>REG_CONFIG_CHECKS_UART_Check</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_uart.o(i.REG_CONFIG_CHECKS_UART_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = REG_CONFIG_CHECKS_UART_Check &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
</UL>

<P><STRONG><a name="[119]"></a>REG_CONFIG_CHECKS_UART_Store</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_uart.o(i.REG_CONFIG_CHECKS_UART_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = REG_CONFIG_CHECKS_UART_Store &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
</UL>

<P><STRONG><a name="[11a]"></a>REG_CONFIG_TIMER_Check</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_timer.o(i.REG_CONFIG_TIMER_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = REG_CONFIG_TIMER_Check &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>REG_CONFIG_TIMER_Store</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_reg_conf_chk_timer.o(i.REG_CONFIG_TIMER_Store))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
</UL>

<P><STRONG><a name="[112]"></a>REPORT_PFC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ttrd2-04a-t0401a-v001a_pfc_reporting.o(i.REPORT_PFC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>

<P><STRONG><a name="[113]"></a>REPORT_PFC_Update</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ttrd2-04a-t0401a-v001a_pfc_reporting.o(i.REPORT_PFC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = REPORT_PFC_Update &rArr; GPIO_SetBits &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>

<P><STRONG><a name="[11d]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[11e]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[e5]"></a>RTC_GetDate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_GetDate &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getDate
</UL>

<P><STRONG><a name="[e7]"></a>RTC_GetTime</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getTime
</UL>

<P><STRONG><a name="[e9]"></a>RTC_SetDate</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_SetDate &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_setDate
</UL>

<P><STRONG><a name="[eb]"></a>RTC_SetTime</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_SetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_setTime
</UL>

<P><STRONG><a name="[11f]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[69]"></a>RTT_05a_Scheduler_Osc_Test_Update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05a_Scheduler_Osc_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTT_05a_Scheduler_Osc_Test_Update &rArr; PROCESSOR_Store_Reqd_MoSt &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[6a]"></a>RTT_05b_Scheduler_Osc_Test_Update</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_05b_Scheduler_Osc_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTT_05b_Scheduler_Osc_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[6b]"></a>RTT_06a_MoniTTor_Overrun_Test_Update</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06a_MoniTTor_Overrun_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RTT_06a_MoniTTor_Overrun_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[6c]"></a>RTT_06b_MoniTTor_Underrun_Test_Update</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_06b_MoniTTor_Underrun_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RTT_06b_MoniTTor_Underrun_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[6d]"></a>RTT_07_PredicTTor_Test_Update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_07_PredicTTor_Test_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTT_07_PredicTTor_Test_Update &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[106]"></a>RTT_Startup_04_WDT_Check</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_run_time_tests.o(i.RTT_Startup_04_WDT_Check))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[7a]"></a>SCHEDULE_SERVICES_Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, schedule_services_task.o(i.SCHEDULE_SERVICES_Update))
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[108]"></a>SCH_Add_Task</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Add_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SCH_Add_Task &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[120]"></a>SCH_Dispatch_Tasks</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Dispatch_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SCH_Dispatch_Tasks &rArr; PREDICTTORi_Check_Task_Sequence &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Check_Task_Sequence
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>SCH_Init_Microseconds</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Init_Microseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SCH_Init_Microseconds &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Set_Interrupt_Priority_Levels
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PREDICTTORi_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONITTORi_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[124]"></a>SCH_Set_Interrupt_Priority_Levels</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Set_Interrupt_Priority_Levels))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCH_Set_Interrupt_Priority_Levels &rArr; NVIC_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[125]"></a>SCH_Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.SCH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SCH_Start &rArr; TIM_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Store
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDIO_ClearITPendingBit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[12a]"></a>SDIO_GetITStatus</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDIO_GetITStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fatfs_sd_sdio.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; SDIO_GetITStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fatfs_sd_sdio.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_ProcessDMAIRQ &rArr; DMA_ClearFlag &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, fatfs_sd_sdio.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_ProcessIRQSrc &rArr; SDIO_GetITStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>SWITCH_BUTTON1_Get_State</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_switch_task.o(i.SWITCH_BUTTON1_Get_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SWITCH_BUTTON1_Get_State &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Update
</UL>

<P><STRONG><a name="[109]"></a>SWITCH_BUTTON1_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_switch_task.o(i.SWITCH_BUTTON1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWITCH_BUTTON1_Init &rArr; GPIO_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ttrd2-18a-t0401a-v001a_monittor_i.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SysTick_Handler &rArr; PROCESSOR_Get_MoSt &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Get_MoSt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001c_scheduler.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TIM2_IRQHandler &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Check
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>TIMEOUT_T3_USEC_Get_Timer_State</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_timeout_t3.o(i.TIMEOUT_T3_USEC_Get_Timer_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMEOUT_T3_USEC_Get_Timer_State &rArr; REG_CONFIG_TIMER_Check &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_Char
</UL>

<P><STRONG><a name="[b7]"></a>TIMEOUT_T3_USEC_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ttrd2-05a-t0401a-v001a_timeout_t3.o(i.TIMEOUT_T3_USEC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMEOUT_T3_USEC_Init &rArr; TIM_TimeBaseInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_vbat_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>

<P><STRONG><a name="[bb]"></a>TIMEOUT_T3_USEC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_timeout_t3.o(i.TIMEOUT_T3_USEC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMEOUT_T3_USEC_Start &rArr; TIM_SetCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_TIMER_Store
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Read_Channel
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_Char
</UL>

<P><STRONG><a name="[12d]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_ClearITPendingBit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>TIM_Cmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
</UL>

<P><STRONG><a name="[12e]"></a>TIM_GetCounter</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = TIM_GetCounter &rArr;  assert_failed (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
</UL>

<P><STRONG><a name="[126]"></a>TIM_ITConfig</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_ITConfig &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
</UL>

<P><STRONG><a name="[130]"></a>TIM_SetCounter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_SetCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
</UL>

<P><STRONG><a name="[121]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_TimeBaseInit &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
</UL>

<P><STRONG><a name="[12f]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
</UL>

<P><STRONG><a name="[131]"></a>UART2_BUF_O_Check_Data_Integrity</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Check_Data_Integrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = UART2_BUF_O_Check_Data_Integrity &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Update
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_Char
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
</UL>

<P><STRONG><a name="[101]"></a>UART2_BUF_O_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_UART_Store
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Init
</UL>

<P><STRONG><a name="[103]"></a>UART2_BUF_O_Send_All_Data</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Send_All_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_Char
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>

<P><STRONG><a name="[132]"></a>UART2_BUF_O_Send_Char</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Send_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEOUT_T3_USEC_Get_Timer_State
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Update
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
</UL>

<P><STRONG><a name="[135]"></a>UART2_BUF_O_Update</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_BUF_O_Update &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_Char
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Check_Data_Integrity
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Update
</UL>

<P><STRONG><a name="[136]"></a>UART2_BUF_O_Write_Char_To_Buffer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Char_To_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>

<P><STRONG><a name="[117]"></a>UART2_BUF_O_Write_Number03_To_Buffer</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_Number03_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_BUF_O_Write_Number03_To_Buffer &rArr; UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>

<P><STRONG><a name="[102]"></a>UART2_BUF_O_Write_String_To_Buffer</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ttrd2-05a-t0401a-v001a_uart2_buff_o_task.o(i.UART2_BUF_O_Write_String_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART2_BUF_O_Write_String_To_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Char_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REPORT_PFC_Update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>

<P><STRONG><a name="[137]"></a>UART_DMA_rx_check</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uart_hal.o(i.UART_DMA_rx_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_DMA_rx_check &rArr; DMA_GetCurrDataCounter &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROCESS_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[10b]"></a>UART_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart_task.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Init &rArr; GPIO_USART_Tx_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_boot_counter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reset_source
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_pool_INIT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_counter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkup_sram_INIT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_reset_source
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_obc_enableBkUpAccess
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_USART_Tx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[138]"></a>UART_PROCESS_DATA</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, uart_hal.o(i.UART_PROCESS_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROCESS_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_rx_check
</UL>

<P><STRONG><a name="[7c]"></a>UART_Update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart_task.o(i.UART_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = UART_Update &rArr; import_pkt &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[dd]"></a>USART_Cmd</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_USART_Tx_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
</UL>

<P><STRONG><a name="[fc]"></a>USART_DMACmd</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_DMACmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[133]"></a>USART_GetFlagStatus</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = USART_GetFlagStatus &rArr;  assert_failed (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_Char
</UL>

<P><STRONG><a name="[dc]"></a>USART_Init</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_USART_Tx_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
</UL>

<P><STRONG><a name="[134]"></a>USART_SendData</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = USART_SendData &rArr;  assert_failed (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_Char
</UL>

<P><STRONG><a name="[111]"></a>WATCHDOG_Get_State</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Get_State))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
</UL>

<P><STRONG><a name="[105]"></a>WATCHDOG_Init</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WATCHDOG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[6e]"></a>WATCHDOG_Update</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ttrd2-05a-t0401a-v001a_iwdt_task.o(i.WATCHDOG_Update))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05b_Scheduler_Osc_Test_Update
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_05a_Scheduler_Osc_Test_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt)
</UL>
<P><STRONG><a name="[c2]"></a>assert_failed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001a_assert_failed.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupRegulatorCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>

<P><STRONG><a name="[13a]"></a>bkup_sram_INIT</STRONG> (Thumb, 522 bytes, Stack size 8 bytes, obc.o(i.bkup_sram_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bkup_sram_INIT &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_obc_BKPSRAM_BASE
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[142]"></a>checkSum</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, service_utilities.o(i.checkSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_inner_tc
</UL>

<P><STRONG><a name="[1a6]"></a>check_existing</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, scheduling_service.o(i.check_existing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_existing
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sch_packet
</UL>

<P><STRONG><a name="[c8]"></a>clear_wod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, housekeeping.o(i.clear_wod))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_WOD_Rep_SCH
</UL>

<P><STRONG><a name="[154]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[15a]"></a>cnv16_8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, service_utilities.o(i.cnv16_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fs_stat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecss_stats_hk
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_save_schedules
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_detailed
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
</UL>

<P><STRONG><a name="[181]"></a>cnv32_8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, service_utilities.o(i.cnv32_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv32_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fs_stat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_qb50
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_save_schedules
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_summary
</UL>

<P><STRONG><a name="[146]"></a>cnv8_16</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, service_utilities.o(i.cnv8_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv8_16
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_inner_tc
</UL>

<P><STRONG><a name="[1b9]"></a>cnv8_16LE</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, service_utilities.o(i.cnv8_16LE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv8_16LE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_load_schedules
</UL>

<P><STRONG><a name="[18a]"></a>cnv8_32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, service_utilities.o(i.cnv8_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv8_32
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_shift_sel_schedule
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_shift_all_tcs
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_load_schedules
</UL>

<P><STRONG><a name="[184]"></a>cnv_UTC_QB50</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, time_management_service.o(i.cnv_UTC_QB50))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnv_UTC_QB50
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_QB50
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_time_QB50
</UL>

<P><STRONG><a name="[145]"></a>copy_inner_tc</STRONG> (Thumb, 732 bytes, Stack size 40 bytes, scheduling_service.o(i.copy_inner_tc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = copy_inner_tc &rArr; checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sch_packet
</UL>

<P><STRONG><a name="[14d]"></a>crt_pkt</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, service_utilities.o(i.crt_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_crtPkt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TC
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_qb50
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_crt_pkt_TM
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_crt_pkt_TM
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
</UL>

<P><STRONG><a name="[17c]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1bb]"></a>disk_ioctl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[172]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[17b]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[173]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[159]"></a>ecss_stats_hk</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ecss_stats.o(i.ecss_stats_hk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecss_stats_hk &rArr; cnv16_8
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[15b]"></a>enable_disable_schedule_apid_release</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, scheduling_service.o(i.enable_disable_schedule_apid_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enable_disable_schedule_apid_release &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[15c]"></a>event_app</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, event_reporting_service.o(i.event_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = event_app &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[13f]"></a>export_pkt</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, upsat.o(i.export_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = export_pkt &rArr; HAL_uart_tx &rArr; MYDMA_Init &rArr; RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_frame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_outbound
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuePop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Update
</UL>

<P><STRONG><a name="[161]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = f_close &rArr; f_sync &rArr; get_fattime &rArr; get_time_UTC &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_schedule_load_api
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
</UL>

<P><STRONG><a name="[165]"></a>f_closedir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
</UL>

<P><STRONG><a name="[166]"></a>f_open</STRONG> (Thumb, 414 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_schedule_load_api
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
</UL>

<P><STRONG><a name="[170]"></a>f_opendir</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
</UL>

<P><STRONG><a name="[171]"></a>f_read</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_schedule_load_api
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
</UL>

<P><STRONG><a name="[174]"></a>f_readdir</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
</UL>

<P><STRONG><a name="[176]"></a>f_stat</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fs_stat
</UL>

<P><STRONG><a name="[162]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = f_sync &rArr; get_fattime &rArr; get_time_UTC &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[178]"></a>f_unlink</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
</UL>

<P><STRONG><a name="[179]"></a>f_write</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
</UL>

<P><STRONG><a name="[1af]"></a>find_schedule_pos</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, scheduling_service.o(i.find_schedule_pos))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[160]"></a>free_pkt</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, pkt_pool.o(i.free_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = free_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_report_api
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[13c]"></a>get_boot_counter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, obc.o(i.get_boot_counter))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[148]"></a>get_fat</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[16b]"></a>get_fattime</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_fattime &rArr; get_time_UTC &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_UTC
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[17f]"></a>get_filePos</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, mass_storage_service.o(i.get_filePos))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_filePos &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
</UL>

<P><STRONG><a name="[180]"></a>get_fs_stat</STRONG> (Thumb, 600 bytes, Stack size 168 bytes, mass_storage_service.o(i.get_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = get_fs_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv32_8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_report_api
</UL>

<P><STRONG><a name="[182]"></a>get_new_fileId</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, mass_storage_service.o(i.get_new_fileId))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_new_fileId &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
</UL>

<P><STRONG><a name="[188]"></a>get_pkt</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, pkt_pool.o(i.get_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_crtPkt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_app
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
</UL>

<P><STRONG><a name="[18f]"></a>get_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc.o(i.get_reset_source))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[183]"></a>get_time_QB50</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, time_management_service.o(i.get_time_QB50))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv_UTC_QB50
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getDate
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_qb50
</UL>

<P><STRONG><a name="[17e]"></a>get_time_UTC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, time_management_service.o(i.get_time_UTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_time_UTC &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_utc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[d4]"></a>hk_INIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, housekeeping.o(i.hk_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPS_Health_Rep_task_Init
</UL>

<P><STRONG><a name="[185]"></a>hk_app</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, housekeeping_service.o(i.hk_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = hk_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[186]"></a>hk_crt_empty_pkt_TM</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, housekeeping_service.o(i.hk_crt_empty_pkt_TM))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hk_crt_empty_pkt_TM &rArr; hk_crt_pkt_TM &rArr; hk_report_parameters &rArr; get_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TM
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
</UL>

<P><STRONG><a name="[c4]"></a>hk_crt_pkt_TC</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, housekeeping_service.o(i.hk_crt_pkt_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hk_crt_pkt_TC &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_exHealth_Req_SCH
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_Health_Req_SCH
</UL>

<P><STRONG><a name="[c9]"></a>hk_crt_pkt_TM</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, housekeeping_service.o(i.hk_crt_pkt_TM))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hk_crt_pkt_TM &rArr; hk_report_parameters &rArr; get_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_WOD_Rep_SCH
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
</UL>

<P><STRONG><a name="[187]"></a>hk_parameters_report</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, housekeeping.o(i.hk_parameters_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hk_parameters_report &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_eps_boot_counter
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_comms_boot_counter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_32
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
</UL>

<P><STRONG><a name="[189]"></a>hk_report_parameters</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, housekeeping.o(i.hk_report_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hk_report_parameters &rArr; get_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_counter
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wod_log_load
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_get_state
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_QB50
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_source
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv32_8
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecss_stats_hk
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TM
</UL>

<P><STRONG><a name="[13e]"></a>import_pkt</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, upsat.o(i.import_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = import_pkt &rArr; route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_deframe
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_inbound
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_dropped_upack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_dropped_hldlc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_rx_check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Update
</UL>

<P><STRONG><a name="[1a8]"></a>is_free_pkt</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, pkt_pool.o(i.is_free_pkt))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_IDLE
</UL>

<P><STRONG><a name="[8f]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; PROCESSOR_Init &rArr; PROCESSOR_Configure_Reqd_MoSt &rArr; ADC1_Init &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Dispatch_Tasks
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[197]"></a>mass_storage_app</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, mass_storage_service.o(i.mass_storage_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_report_api
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_delete_api
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sram_hard_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[19f]"></a>mass_storage_crtPkt</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mass_storage_service.o(i.mass_storage_crtPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mass_storage_crtPkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_report_api
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
</UL>

<P><STRONG><a name="[19a]"></a>mass_storage_delete_api</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, mass_storage_service.o(i.mass_storage_delete_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mass_storage_delete_api &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
</UL>

<P><STRONG><a name="[1a0]"></a>mass_storage_downlinkFile</STRONG> (Thumb, 366 bytes, Stack size 624 bytes, mass_storage_service.o(i.mass_storage_downlinkFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = mass_storage_downlinkFile &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_debugging
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filePos
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
</UL>

<P><STRONG><a name="[19d]"></a>mass_storage_downlink_api</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, mass_storage_service.o(i.mass_storage_downlink_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_updatePkt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_crtPkt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
</UL>

<P><STRONG><a name="[199]"></a>mass_storage_hard_delete</STRONG> (Thumb, 374 bytes, Stack size 160 bytes, mass_storage_service.o(i.mass_storage_hard_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mass_storage_hard_delete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_debugging
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
</UL>

<P><STRONG><a name="[1a3]"></a>mass_storage_list</STRONG> (Thumb, 606 bytes, Stack size 176 bytes, mass_storage_service.o(i.mass_storage_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mass_storage_list &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_debugging
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv32_8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
</UL>

<P><STRONG><a name="[19c]"></a>mass_storage_list_api</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, mass_storage_service.o(i.mass_storage_list_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mass_storage_list_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_updatePkt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_crtPkt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
</UL>

<P><STRONG><a name="[19b]"></a>mass_storage_report_api</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mass_storage_service.o(i.mass_storage_report_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mass_storage_report_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_updatePkt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_crtPkt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fs_stat
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
</UL>

<P><STRONG><a name="[1a4]"></a>mass_storage_schedule_load_api</STRONG> (Thumb, 220 bytes, Stack size 624 bytes, mass_storage_service.o(i.mass_storage_schedule_load_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = mass_storage_schedule_load_api &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_debugging
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_load_schedules
</UL>

<P><STRONG><a name="[19e]"></a>mass_storage_storeFile</STRONG> (Thumb, 328 bytes, Stack size 624 bytes, mass_storage_service.o(i.mass_storage_storeFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = mass_storage_storeFile &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_debugging
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_fileId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_save_schedules
</UL>

<P><STRONG><a name="[1a2]"></a>mass_storage_updatePkt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mass_storage_service.o(i.mass_storage_updatePkt))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_report_api
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
</UL>

<P><STRONG><a name="[1a1]"></a>ms_debugging</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mass_storage_service.o(i.ms_debugging))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_schedule_load_api
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
</UL>

<P><STRONG><a name="[18e]"></a>ms_get_state</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mass_storage_service.o(i.ms_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[1ae]"></a>operations_scheduling_reset_schedule_api</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, scheduling_service.o(i.operations_scheduling_reset_schedule_api))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[15f]"></a>pack_pkt</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, service_utilities.o(i.pack_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pack_pkt &rArr; checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[1a5]"></a>parse_sch_packet</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, scheduling_service.o(i.parse_sch_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = parse_sch_packet &rArr; copy_inner_tc &rArr; checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_inner_tc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_existing
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[139]"></a>pkt_pool_INIT</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, pkt_pool.o(i.pkt_pool_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[149]"></a>put_fat</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1a7]"></a>queuePeak</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, queue.o(i.queuePeak))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_IDLE
</UL>

<P><STRONG><a name="[15d]"></a>queuePop</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, queue.o(i.queuePop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queuePop
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_IDLE
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[1ad]"></a>queuePush</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, queue.o(i.queuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[f5]"></a>queue_IDLE</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.queue_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_IDLE &rArr; queuePop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuePop
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuePeak
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_free_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDLE_Update
</UL>

<P><STRONG><a name="[1a9]"></a>return_time_QB50</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, time_management_service.o(i.return_time_QB50))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = return_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv_UTC_QB50
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_getDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_shift_sel_schedule
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_shift_all_tcs
</UL>

<P><STRONG><a name="[c5]"></a>route_pkt</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, obc.o(i.route_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = route_pkt &rArr; mass_storage_app &rArr; mass_storage_downlink_api &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_app
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_app
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuePush
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_exHealth_Req_SCH
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_WOD_Rep_SCH
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_Health_Req_SCH
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_report_api
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_app
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[1ab]"></a>scheduling_app</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, scheduling_service.o(i.scheduling_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = scheduling_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_shift_sel_schedule
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_shift_all_tcs
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_save_schedules
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_summary
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_detailed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_load_schedules
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_remove_schedule_api
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sch_packet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operations_scheduling_reset_schedule_api
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_schedule_pos
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_disable_schedule_apid_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[1b0]"></a>scheduling_remove_schedule_api</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, scheduling_service.o(i.scheduling_remove_schedule_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scheduling_remove_schedule_api
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[1b7]"></a>scheduling_service_crt_pkt_TM</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, scheduling_service.o(i.scheduling_service_crt_pkt_TM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = scheduling_service_crt_pkt_TM &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_summary
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_detailed
</UL>

<P><STRONG><a name="[1b5]"></a>scheduling_service_load_schedules</STRONG> (Thumb, 724 bytes, Stack size 32 bytes, scheduling_service.o(i.scheduling_service_load_schedules))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = scheduling_service_load_schedules &rArr; mass_storage_schedule_load_api &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_schedule_load_api
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_32
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16LE
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[1b3]"></a>scheduling_service_report_detailed</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, scheduling_service.o(i.scheduling_service_report_detailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = scheduling_service_report_detailed &rArr; scheduling_service_crt_pkt_TM &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_crt_pkt_TM
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[1b4]"></a>scheduling_service_report_summary</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, scheduling_service.o(i.scheduling_service_report_summary))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scheduling_service_report_summary &rArr; scheduling_service_crt_pkt_TM &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv32_8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_crt_pkt_TM
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[1b6]"></a>scheduling_service_save_schedules</STRONG> (Thumb, 964 bytes, Stack size 24 bytes, scheduling_service.o(i.scheduling_service_save_schedules))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = scheduling_service_save_schedules &rArr; mass_storage_storeFile &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv32_8
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[13b]"></a>set_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obc.o(i.set_reset_source))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[1ba]"></a>set_time_UTC</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, time_management_service.o(i.set_time_UTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_time_UTC &rArr; HAL_sys_setTime &rArr; RTC_SetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_setTime
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_sys_setDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_app
</UL>

<P><STRONG><a name="[198]"></a>sram_hard_delete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, obc.o(i.sram_hard_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sram_hard_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_obc_BKPSRAM_BASE
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
</UL>

<P><STRONG><a name="[196]"></a>stats_dropped_hldlc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecss_stats.o(i.stats_dropped_hldlc))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[194]"></a>stats_dropped_upack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecss_stats.o(i.stats_dropped_upack))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[193]"></a>stats_inbound</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ecss_stats.o(i.stats_inbound))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stats_inbound &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[15e]"></a>stats_outbound</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ecss_stats.o(i.stats_outbound))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stats_outbound &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
</UL>

<P><STRONG><a name="[1ac]"></a>test_app</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, test_service.o(i.test_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = test_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[1bc]"></a>test_crt_pkt</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, test_service.o(i.test_crt_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = test_crt_pkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
</UL>

<P><STRONG><a name="[1aa]"></a>time_management_app</STRONG> (Thumb, 1758 bytes, Stack size 24 bytes, time_management_service.o(i.time_management_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = time_management_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_utc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_qb50
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_UTC
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[1bf]"></a>time_management_crt_pkt_TM</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, time_management_service.o(i.time_management_crt_pkt_TM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = time_management_crt_pkt_TM &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_utc
</UL>

<P><STRONG><a name="[1bd]"></a>time_management_report_time_in_qb50</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, time_management_service.o(i.time_management_report_time_in_qb50))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = time_management_report_time_in_qb50 &rArr; get_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_QB50
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv32_8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_app
</UL>

<P><STRONG><a name="[1be]"></a>time_management_report_time_in_utc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, time_management_service.o(i.time_management_report_time_in_utc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = time_management_report_time_in_utc &rArr; time_management_crt_pkt_TM &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_crt_pkt_TM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_UTC
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_app
</UL>

<P><STRONG><a name="[1b2]"></a>time_shift_all_tcs</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, scheduling_service.o(i.time_shift_all_tcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = time_shift_all_tcs &rArr; return_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_32
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_time_QB50
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[1b1]"></a>time_shift_sel_schedule</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, scheduling_service.o(i.time_shift_sel_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = time_shift_sel_schedule &rArr; return_time_QB50 &rArr; HAL_sys_getTime &rArr; RTC_GetTime &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_32
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_time_QB50
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
</UL>

<P><STRONG><a name="[f3]"></a>tst_debugging</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, services.o(i.tst_debugging))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_Number03_To_Buffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;export_pkt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkup_sram_INIT
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_storeFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_schedule_load_api
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_report_api
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list_api
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_list
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_hard_delete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlink_api
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_downlinkFile
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_delete_api
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_crtPkt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_app
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_fileId
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fs_stat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filePos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_empty_pkt_TM
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_app
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_crt_pkt_TC
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_frame
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLDLC_deframe
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_app
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_outbound
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_inbound
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_utc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_report_time_in_qb50
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_crt_pkt_TM
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_crt_pkt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_pkt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_pkt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSum
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_shift_sel_schedule
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_summary
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_report_detailed
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_service_crt_pkt_TM
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sch_packet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_disable_schedule_apid_release
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_inner_tc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_management_app
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_app
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduling_app
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pkt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
</UL>

<P><STRONG><a name="[192]"></a>unpack_pkt</STRONG> (Thumb, 776 bytes, Stack size 40 bytes, service_utilities.o(i.unpack_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = unpack_pkt &rArr; checkSum &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv8_16
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
</UL>

<P><STRONG><a name="[13d]"></a>update_boot_counter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, obc.o(i.update_boot_counter))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[18d]"></a>update_comms_boot_counter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, obc.o(i.update_comms_boot_counter))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
</UL>

<P><STRONG><a name="[18b]"></a>update_eps_boot_counter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, obc.o(i.update_eps_boot_counter))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_parameters_report
</UL>

<P><STRONG><a name="[195]"></a>verification_app</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, verification_service.o(i.verification_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = verification_app &rArr;  route_pkt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_crt_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_pkt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;route_pkt
</UL>

<P><STRONG><a name="[1c0]"></a>verification_crt_pkt</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, verification_service.o(i.verification_crt_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = verification_crt_pkt &rArr; crt_pkt &rArr; tst_debugging &rArr; UART2_BUF_O_Send_All_Data &rArr; UART2_BUF_O_Send_Char &rArr;  TIMEOUT_T3_USEC_Start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_pkt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_debugging
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnv16_8
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verification_app
</UL>

<P><STRONG><a name="[c7]"></a>wod_log</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, obc.o(i.wod_log))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_WOD_Rep_SCH
</UL>

<P><STRONG><a name="[190]"></a>wod_log_load</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, obc.o(i.wod_log_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wod_log_load
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hk_report_parameters
</UL>

<P><STRONG><a name="[67]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1f7]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1f8]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[115]"></a>PROCESSOR_TASK_Retrieve_State</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Retrieve_State))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Init
</UL>

<P><STRONG><a name="[116]"></a>PROCESSOR_TASK_Store_State</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ttrd2-19a-t0401a-v001b_processor_task.o(i.PROCESSOR_TASK_Store_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PROCESSOR_TASK_Store_State &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Update
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_USART_Tx_Init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, uart_task.o(i.GPIO_USART_Tx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GPIO_USART_Tx_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[11b]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[11c]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[12c]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[100]"></a>PROCESSOR_Configure_Reqd_MoSt</STRONG> (Thumb, 818 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Configure_Reqd_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PROCESSOR_Configure_Reqd_MoSt &rArr; ADC1_Init &rArr; ADC1_Read_Channel &rArr; PROCESSOR_Perform_Safe_Shutdown &rArr; REPORT_PFC_Init &rArr; UART2_BUF_O_Init &rArr; USART_Init &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWITCH_BUTTON1_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Update
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEARTBEAT_SW_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Perform_Safe_Shutdown
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Temperature_Celsius
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPS_Health_Rep_task_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_Reqd_MoSt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Store_PFC
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Change_MoSt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_TASK_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Write_String_To_Buffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Send_All_Data
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BUF_O_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Retrieve_PFC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_CONFIG_CHECKS_GPIO_Store
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_Microseconds
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Add_Task
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_Startup_04_WDT_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Init
</UL>

<P><STRONG><a name="[10d]"></a>PROCESSOR_Identify_Reqd_MoSt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Identify_Reqd_MoSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PROCESSOR_Identify_Reqd_MoSt &rArr; RCC_GetFlagStatus &rArr; assert_failed &rArr;  PROCESSOR_Perform_Safe_Shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Set_MoSt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Retrieve_Reqd_MoSt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Retrieve_PFC
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Init
</UL>

<P><STRONG><a name="[104]"></a>PROCESSOR_Retrieve_PFC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Retrieve_PFC))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Configure_Reqd_MoSt
</UL>

<P><STRONG><a name="[10e]"></a>PROCESSOR_Retrieve_Reqd_MoSt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Retrieve_Reqd_MoSt))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[10f]"></a>PROCESSOR_Set_MoSt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ttrd2-19a-t0401a-v001b_processor.o(i.PROCESSOR_Set_MoSt))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROCESSOR_Identify_Reqd_MoSt
</UL>

<P><STRONG><a name="[143]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[14c]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[169]"></a>chk_lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[17d]"></a>clear_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[147]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[14a]"></a>create_name</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[164]"></a>dec_lock</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[14e]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[151]"></a>dir_find</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[150]"></a>dir_next</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[155]"></a>dir_read</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[156]"></a>dir_register</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[158]"></a>dir_remove</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dir_remove &rArr; dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[14f]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[16a]"></a>enq_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[167]"></a>find_volume</STRONG> (Thumb, 906 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[168]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[175]"></a>get_fileinfo</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[17a]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[16f]"></a>inc_lock</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[16c]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[152]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[157]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[14b]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[144]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[16e]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[16d]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[177]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[153]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[163]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[68]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
